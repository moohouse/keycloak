{"version":3,"file":"static/js/5571.f0fea90d.chunk.js","mappings":"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","sources":["../node_modules/@codegouvfr/react-dsfr/src/shared/Fieldset.tsx","../node_modules/@codegouvfr/react-dsfr/src/Checkbox.tsx","../node_modules/@codegouvfr/react-dsfr/src/AgentConnectButton.tsx","../node_modules/@codegouvfr/react-dsfr/src/FranceConnectButton.tsx","login/pages/Login.tsx","../node_modules/@codegouvfr/react-dsfr/src/Button.tsx","../node_modules/@codegouvfr/react-dsfr/src/Input.tsx","../node_modules/@codegouvfr/react-dsfr/src/blocks/PasswordInput.tsx","../node_modules/@codegouvfr/react-dsfr/src/tools/useAnalyticsId.ts","../node_modules/keycloakify/src/lib/useGetClassName.ts","../node_modules/keycloakify/src/login/lib/useGetClassName.ts","../node_modules/keycloakify/src/tools/clsx.ts","../node_modules/tsafe/src/symToStr.ts","../node_modules/keycloakify/node_modules/tsafe/src/typeGuard.ts"],"sourcesContent":["import React, {\n    useId,\n    memo,\n    forwardRef,\n    type ReactNode,\n    type CSSProperties,\n    type InputHTMLAttributes,\n    type DetailedHTMLProps\n} from \"react\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { assert } from \"tsafe/assert\";\nimport type { Equals } from \"tsafe\";\nimport { cx } from \"../tools/cx\";\nimport { fr } from \"../fr\";\nimport { useAnalyticsId } from \"../tools/useAnalyticsId\";\n\nexport type FieldsetProps = FieldsetProps.Radio | FieldsetProps.Checkbox;\n\nexport namespace FieldsetProps {\n    export type Common = {\n        className?: string;\n        id?: string;\n        classes?: Partial<Record<\"root\" | \"legend\" | \"content\", string>>;\n        style?: CSSProperties;\n        legend?: ReactNode;\n        hintText?: ReactNode;\n        options: {\n            label: ReactNode;\n            hintText?: ReactNode;\n            nativeInputProps: DetailedHTMLProps<\n                InputHTMLAttributes<HTMLInputElement>,\n                HTMLInputElement\n            >;\n        }[];\n        /** Default: \"vertical\" */\n        orientation?: \"vertical\" | \"horizontal\";\n        /** Default: \"default\" */\n        state?: \"success\" | \"error\" | \"default\";\n        /**\n         * The message won't be displayed if state is \"default\".\n         * If the state is \"error\" providing a message is mandatory\n         **/\n        stateRelatedMessage?: ReactNode;\n        /** Default: false */\n        disabled?: boolean;\n        /** default: false */\n        small?: boolean;\n    };\n\n    export type Radio = Common & {\n        type: \"radio\";\n        name?: string;\n    };\n\n    export type Checkbox = Common & {\n        type: \"checkbox\";\n        name?: never;\n    };\n}\n\n/** @see <https://components.react-dsfr.codegouv.studio/?path=/docs/components-radiobutton> */\nexport const Fieldset = memo(\n    forwardRef<HTMLFieldSetElement, FieldsetProps>((props, ref) => {\n        const {\n            className,\n            id: id_props,\n            classes = {},\n            style,\n            legend,\n            hintText,\n            options,\n            orientation = \"vertical\",\n            state = \"default\",\n            stateRelatedMessage,\n            disabled = false,\n            type,\n            name: name_props,\n            small = false,\n            ...rest\n        } = props;\n\n        assert<Equals<keyof typeof rest, never>>();\n\n        const id = useAnalyticsId({\n            \"defaultIdPrefix\": `fr-fieldset-${type}${\n                name_props === undefined ? \"\" : `-${name_props}`\n            }`,\n            \"explicitlyProvidedId\": id_props\n        });\n\n        const getInputId = (i: number) => `${id}-${i}`;\n\n        const legendId = `${id}-legend`;\n\n        const errorDescId = `${id}-desc-error`;\n        const successDescId = `${id}-desc-valid`;\n        const messagesWrapperId = `${id}-messages`;\n\n        const radioName = (function useClosure() {\n            const id = useId();\n\n            return name_props ?? `radio-name-${id}`;\n        })();\n\n        return (\n            <fieldset\n                id={id}\n                className={cx(\n                    fr.cx(\n                        \"fr-fieldset\",\n                        orientation === \"horizontal\" && \"fr-fieldset--inline\",\n                        (() => {\n                            switch (state) {\n                                case \"default\":\n                                    return undefined;\n                                case \"error\":\n                                    return \"fr-fieldset--error\";\n                                case \"success\":\n                                    return \"fr-fieldset--valid\";\n                            }\n                        })()\n                    ),\n                    classes.root,\n                    className\n                )}\n                disabled={disabled}\n                style={style}\n                aria-labelledby={cx(legend !== undefined && legendId, messagesWrapperId)}\n                role={state === \"default\" ? undefined : \"group\"}\n                {...rest}\n                ref={ref}\n            >\n                {legend !== undefined && (\n                    <legend\n                        id={legendId}\n                        className={cx(\n                            fr.cx(\"fr-fieldset__legend\", \"fr-text--regular\"),\n                            classes.legend\n                        )}\n                    >\n                        {legend}\n                        {hintText !== undefined && (\n                            <span className={fr.cx(\"fr-hint-text\")}>{hintText}</span>\n                        )}\n                    </legend>\n                )}\n                <div className={cx(fr.cx(\"fr-fieldset__content\"), classes.content)}>\n                    {options.map(({ label, hintText, nativeInputProps }, i) => (\n                        <div\n                            className={fr.cx(`fr-${type}-group`, small && `fr-${type}-group--sm`)}\n                            key={i}\n                        >\n                            <input\n                                type={type}\n                                id={getInputId(i)}\n                                name={radioName}\n                                {...nativeInputProps}\n                            />\n                            <label className={fr.cx(\"fr-label\")} htmlFor={getInputId(i)}>\n                                {label}\n                                {hintText !== undefined && (\n                                    <span className={fr.cx(\"fr-hint-text\")}>{hintText}</span>\n                                )}\n                            </label>\n                        </div>\n                    ))}\n                </div>\n                <div\n                    className={fr.cx(\"fr-messages-group\")}\n                    id={messagesWrapperId}\n                    aria-live=\"assertive\"\n                >\n                    {stateRelatedMessage !== undefined && (\n                        <p\n                            id={(() => {\n                                switch (state) {\n                                    case \"error\":\n                                        return errorDescId;\n                                    case \"success\":\n                                        return successDescId;\n                                }\n                            })()}\n                            className={fr.cx(\n                                \"fr-message\",\n                                (() => {\n                                    switch (state) {\n                                        case \"error\":\n                                            return \"fr-message--error\";\n                                        case \"success\":\n                                            return \"fr-message--valid\";\n                                    }\n                                })()\n                            )}\n                        >\n                            {stateRelatedMessage}\n                        </p>\n                    )}\n                </div>\n            </fieldset>\n        );\n    })\n);\n\nFieldset.displayName = symToStr({ Fieldset });\n\nexport default Fieldset;\n","import React, { memo, forwardRef } from \"react\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { Fieldset, type FieldsetProps } from \"./shared/Fieldset\";\n\nexport type CheckboxProps = FieldsetProps.Common;\n\n/** @see <https://components.react-dsfr.codegouv.studio/?path=/docs/components-checkbox> */\nexport const Checkbox = memo(\n    forwardRef<HTMLFieldSetElement, CheckboxProps>((props, ref) => (\n        <Fieldset ref={ref} type=\"checkbox\" {...props} />\n    ))\n);\n\nCheckbox.displayName = symToStr({ Checkbox });\n\nexport default Checkbox;\n","import React, { forwardRef, memo, type CSSProperties } from \"react\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { createComponentI18nApi } from \"./i18n\";\nimport { fr } from \"./fr\";\nimport { assert, type Equals } from \"tsafe/assert\";\nimport \"./assets/agentconnect.css\";\nimport { cx } from \"./tools/cx\";\n\nexport type AgentConnectButtonProps =\n    | AgentConnectButtonProps.WithUrl\n    | AgentConnectButtonProps.WithOnClick;\n\nexport namespace AgentConnectButtonProps {\n    type Common = {\n        className?: string;\n        id?: string;\n        style?: CSSProperties;\n    };\n    export type WithUrl = Common & {\n        url: string;\n        onClick?: never;\n    };\n    export type WithOnClick = Common & {\n        url?: never;\n        onClick: React.MouseEventHandler<HTMLButtonElement>;\n    };\n}\n\n/** @see <https://components.react-dsfr.codegouv.studio/?path=/docs/components-franceconnectbutton> */\nexport const AgentConnectButton = memo(\n    forwardRef<HTMLDivElement, AgentConnectButtonProps>((props, ref) => {\n        const { className, url: href, style, onClick, id: id_props, ...rest } = props;\n\n        assert<Equals<keyof typeof rest, never>>();\n\n        const { t } = useTranslation();\n\n        const Inner = onClick !== undefined ? \"button\" : \"a\";\n\n        return (\n            <div\n                id={id_props ?? \"fr-agentconnect-button\"}\n                className={className}\n                style={style}\n                ref={ref}\n            >\n                <span className=\"agentconnect-button__preload-hover\" />\n                <Inner\n                    className=\"agentconnect-button__link\"\n                    {...((onClick !== undefined ? { onClick } : { href }) as any)}\n                />\n                <p>\n                    <a\n                        className={cx(\n                            \"agentconnect-button__hint\",\n                            fr.cx(\"fr-text--sm\", \"fr-mt-1v\")\n                        )}\n                        href=\"https://agentconnect.gouv.fr/\"\n                        target=\"_blank\"\n                    >\n                        {t(\"what is AgentConnect ?\")}\n                    </a>\n                </p>\n            </div>\n        );\n    })\n);\n\nAgentConnectButton.displayName = symToStr({ AgentConnectButton });\n\nexport default AgentConnectButton;\n\nconst { useTranslation, addAgentConnectButtonTranslations } = createComponentI18nApi({\n    \"componentName\": symToStr({ AgentConnectButton }),\n    \"frMessages\": {\n        /* spell-checker: disable */\n        \"what is AgentConnect ?\": \"Qu’est-ce que AgentConnect ?\"\n        /* spell-checker: enable */\n    }\n});\n\naddAgentConnectButtonTranslations({\n    \"lang\": \"en\",\n    \"messages\": {\n        \"what is AgentConnect ?\": \"What's AgentConnect ?\"\n    }\n});\n\nexport { addAgentConnectButtonTranslations };\n","import React, { forwardRef, memo, type CSSProperties } from \"react\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { createComponentI18nApi } from \"./i18n\";\nimport { fr } from \"./fr\";\nimport { assert, type Equals } from \"tsafe/assert\";\nimport { cx } from \"./tools/cx\";\nimport { useAnalyticsId } from \"./tools/useAnalyticsId\";\n\nexport type FranceConnectButtonProps =\n    | FranceConnectButtonProps.WithUrl\n    | FranceConnectButtonProps.WithOnClick;\n\nexport namespace FranceConnectButtonProps {\n    type Common = {\n        id?: string;\n        className?: string;\n        /** Default: false */\n        plus?: boolean;\n        classes?: Partial<Record<\"root\" | \"login\" | \"brand\", string>>;\n        style?: CSSProperties;\n    };\n    export type WithUrl = Common & {\n        url: string;\n        onClick?: never;\n    };\n    export type WithOnClick = Common & {\n        url?: never;\n        onClick: React.MouseEventHandler<HTMLButtonElement>;\n    };\n}\n\n/** @see <https://components.react-dsfr.codegouv.studio/?path=/docs/components-franceconnectbutton> */\nexport const FranceConnectButton = memo(\n    forwardRef<HTMLDivElement, FranceConnectButtonProps>((props, ref) => {\n        const {\n            classes = {},\n            className,\n            url: href,\n            plus = false,\n            style,\n            onClick,\n            id: id_props,\n            ...rest\n        } = props;\n\n        assert<Equals<keyof typeof rest, never>>();\n\n        const id = useAnalyticsId({\n            \"defaultIdPrefix\": \"fr-franceconnect-button\",\n            \"explicitlyProvidedId\": id_props\n        });\n\n        const { t } = useTranslation();\n\n        const Inner = onClick !== undefined ? \"button\" : \"a\";\n        const innerProps = (onClick !== undefined ? { onClick } : { href }) as any;\n\n        return (\n            <div\n                id={id}\n                className={cx(fr.cx(\"fr-connect-group\"), classes.root, className)}\n                style={style}\n                ref={ref}\n            >\n                <Inner className={fr.cx(\"fr-btn\", \"fr-connect\")} {...innerProps}>\n                    <span className={cx(fr.cx(\"fr-connect__login\"), classes.login)}>\n                        S’identifier avec\n                    </span>\n                    <span className={cx(fr.cx(\"fr-connect__brand\"), classes.brand)}>\n                        FranceConnect{plus ? \"+\" : \"\"}\n                    </span>\n                </Inner>\n                <p>\n                    <a\n                        href={\n                            plus\n                                ? \"https://franceconnect.gouv.fr/france-connect-plus\"\n                                : \"https://franceconnect.gouv.fr/\"\n                        }\n                        target=\"_blank\"\n                        rel=\"noopener\"\n                        title={`${t(\"what is service\", { plus })} - ${t(\"new window\")}`}\n                    >\n                        {t(\"what is service\", { plus })}\n                    </a>\n                </p>\n            </div>\n        );\n    })\n);\n\nFranceConnectButton.displayName = symToStr({ FranceConnectButton });\n\nexport default FranceConnectButton;\n\nconst { useTranslation, addFranceConnectButtonTranslations } = createComponentI18nApi({\n    \"componentName\": symToStr({ FranceConnectButton }),\n    \"frMessages\": {\n        /* spell-checker: disable */\n        \"what is service\": (params: { plus: boolean }) =>\n            `Qu’est-ce que FranceConnect${params.plus ? \"+\" : \"\"} ?`,\n        \"new window\": \"nouvelle fenêtre\"\n        /* spell-checker: enable */\n    }\n});\n\naddFranceConnectButtonTranslations({\n    \"lang\": \"en\",\n    \"messages\": {\n        \"what is service\": ({ plus }) => `What's FranceConnect${plus ? \"+\" : \"\"} ?`,\n        \"new window\": \"new window\"\n    }\n});\n\nexport { addFranceConnectButtonTranslations };\n","import { useState, type FormEventHandler } from \"react\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { tss } from \"tss-react/dsfr\";\nimport { fr } from \"@codegouvfr/react-dsfr\";\nimport { Button } from \"@codegouvfr/react-dsfr/Button\";\nimport { Input } from \"@codegouvfr/react-dsfr/Input\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\nimport { Checkbox } from \"@codegouvfr/react-dsfr/Checkbox\";\nimport { PasswordInput } from \"@codegouvfr/react-dsfr/blocks/PasswordInput\";\nimport { AgentConnectButton } from \"@codegouvfr/react-dsfr/AgentConnectButton\";\nimport { FranceConnectButton } from \"@codegouvfr/react-dsfr/FranceConnectButton\";\n\nexport default function Login(\n    props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>\n) {\n    const { kcContext, i18n, Template, doUseDefaultCss, classes: classes_props } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        \"classes\": classes_props\n    });\n\n    const { social, realm, url, usernameHidden, login, auth, registrationDisabled } =\n        kcContext;\n\n    const { msg, msgStr } = i18n;\n    const { classes, cx } = useStyles();\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement\n            .querySelector(\"input[name='email']\")\n            ?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, \"classes\": classes_props }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"connect\")}\n            infoNode={\n                <div className={classes.resetAndRegister}>\n                    {realm.resetPasswordAllowed && (\n                        <a\n                            tabIndex={5}\n                            href={url.loginResetCredentialsUrl}\n                            className={cx(\n                                fr.cx(\n                                    \"fr-link\",\n                                    \"fr-icon-arrow-right-line\",\n                                    \"fr-link--icon-right\"\n                                ),\n                                classes.forgotPassword\n                            )}\n                        >\n                            {msgStr(\"doForgotPassword\")}\n                        </a>\n                    )}\n                    {realm.password &&\n                        realm.registrationAllowed &&\n                        !registrationDisabled && (\n                            <a\n                                tabIndex={6}\n                                href={url.registrationUrl}\n                                className={fr.cx(\n                                    \"fr-link\",\n                                    \"fr-icon-arrow-right-line\",\n                                    \"fr-link--icon-right\"\n                                )}\n                            >\n                                {msgStr(\"noAccount\")}\n                            </a>\n                        )}\n                </div>\n            }\n        >\n            <div id=\"kc-form\">\n                <div id=\"kc-form-wrapper\">\n                    {realm.password && (\n                        <form\n                            id=\"kc-form-login\"\n                            onSubmit={onSubmit}\n                            action={url.loginAction}\n                            method=\"post\"\n                            className={classes.centerCol}\n                        >\n                            {realm.password && social.providers !== undefined && (\n                                <div\n                                    id=\"kc-social-providers\"\n                                    className={classes.agentConnect}\n                                >\n                                    <div\n                                        className={cx(\n                                            getClassName(\"kcFormSocialAccountListClass\"),\n                                            social.providers.length > 4 &&\n                                                getClassName(\n                                                    \"kcFormSocialAccountDoubleListClass\"\n                                                )\n                                        )}\n                                    >\n                                        {social.providers.map(p => (\n                                            <div key={p.providerId}>\n                                                {p.displayName\n                                                    .toLocaleLowerCase()\n                                                    .replace(/ /g, \"\")\n                                                    .includes(\"agentconnect\") ? (\n                                                    <AgentConnectButton\n                                                        style={{ \"textAlign\": \"center\" }}\n                                                        url={p.loginUrl}\n                                                    />\n                                                ) : p.displayName\n                                                      .toLocaleLowerCase()\n                                                      .replace(/ /g, \"\")\n                                                      .includes(\"franceconnect\") ? (\n                                                    <FranceConnectButton\n                                                        style={{ \"textAlign\": \"center\" }}\n                                                        url={p.loginUrl}\n                                                    />\n                                                ) : (\n                                                    <Button\n                                                        linkProps={{\n                                                            \"href\": p.loginUrl\n                                                        }}\n                                                    >\n                                                        {p.displayName}\n                                                    </Button>\n                                                )}\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n                            )}\n                            <h5>{msgStr(\"selfCredentials\")}</h5>\n                            <div className={classes.inputs}>\n                                {(() => {\n                                    const label = !realm.loginWithEmailAllowed\n                                        ? \"username\"\n                                        : realm.registrationEmailAsUsername\n                                        ? \"email\"\n                                        : \"usernameOrEmail\";\n\n                                    const autoCompleteHelper: typeof label =\n                                        label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                    return (\n                                        <Input\n                                            nativeInputProps={{\n                                                \"tabIndex\": 1,\n                                                \"id\": autoCompleteHelper,\n                                                \"name\": autoCompleteHelper,\n                                                \"type\": \"email\",\n                                                \"defaultValue\": login.username ?? \"\",\n                                                ...(usernameHidden\n                                                    ? { \"disabled\": true }\n                                                    : {\n                                                          \"autoFocus\": true,\n                                                          \"autoComplete\": \"off\"\n                                                      })\n                                            }}\n                                            label={msgStr(\"email\")}\n                                            hintText={msgStr(\"email hint\")}\n                                        />\n                                    );\n                                })()}\n                                <PasswordInput\n                                    label={msgStr(\"password\")}\n                                    nativeInputProps={{\n                                        \"tabIndex\": 2,\n                                        \"id\": \"password\",\n                                        \"name\": \"password\",\n                                        \"autoComplete\": \"off\"\n                                    }}\n                                />\n                                <div\n                                    className={cx(\n                                        getClassName(\"kcFormGroupClass\"),\n                                        getClassName(\"kcFormSettingClass\")\n                                    )}\n                                >\n                                    <div id=\"kc-form-options\">\n                                        {realm.rememberMe && !usernameHidden && (\n                                            <Checkbox\n                                                className={classes.rememberMe}\n                                                options={[\n                                                    {\n                                                        \"label\": msg(\"rememberMe\"),\n                                                        \"nativeInputProps\": {\n                                                            \"tabIndex\": 3,\n                                                            \"name\": \"rememberMe\",\n                                                            ...(login.rememberMe\n                                                                ? {\n                                                                      \"checked\": true\n                                                                  }\n                                                                : {})\n                                                        }\n                                                    }\n                                                ]}\n                                            />\n                                        )}\n                                    </div>\n                                </div>\n                            </div>\n                            <div\n                                id=\"kc-form-buttons\"\n                                className={getClassName(\"kcFormGroupClass\")}\n                            >\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                              \"value\": auth.selectedCredential\n                                          }\n                                        : {})}\n                                />\n                                <input\n                                    tabIndex={4}\n                                    className={fr.cx(\"fr-btn\")}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"connect\")}\n                                    disabled={isLoginButtonDisabled}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </Template>\n    );\n}\n\nconst useStyles = tss.withName({ Login }).create({\n    \"centerCol\": {\n        \"display\": \"flex\",\n        \"flexDirection\": \"column\",\n        \"alignItems\": \"center\"\n    },\n    \"inputs\": {\n        \"display\": \"flex\",\n        \"flexDirection\": \"column\",\n        \"width\": \"100%\"\n    },\n    \"agentConnect\": {\n        \"&&&\": {\n            \"borderRight\": \"none\"\n        }\n    },\n    \"forgotPassword\": {\n        \"marginRight\": fr.spacing(\"6v\")\n    },\n    \"resetAndRegister\": {\n        \"display\": \"flex\",\n        \"justifyContent\": \"center\",\n        \"marginTop\": fr.spacing(\"6v\")\n    },\n    \"rememberMe\": {\n        \"marginTop\": fr.spacing(\"5v\")\n    }\n});\n","import React, {\n    memo,\n    forwardRef,\n    type ReactNode,\n    type RefAttributes,\n    type MemoExoticComponent,\n    type ForwardRefExoticComponent,\n    type CSSProperties,\n    type ComponentProps\n} from \"react\";\nimport { fr } from \"./fr\";\nimport { cx } from \"./tools/cx\";\nimport type { FrIconClassName, RiIconClassName } from \"./fr/generatedFromCss/classNames\";\nimport { getLink } from \"./link\";\nimport type { RegisteredLinkProps } from \"./link\";\nimport { assert } from \"tsafe/assert\";\nimport type { Equals } from \"tsafe\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { useAnalyticsId } from \"./tools/useAnalyticsId\";\n\nexport type ButtonProps = ButtonProps.Common &\n    (ButtonProps.IconOnly | ButtonProps.WithIcon | ButtonProps.WithoutIcon) &\n    (ButtonProps.AsAnchor | ButtonProps.AsButton);\nexport namespace ButtonProps {\n    export type Common = {\n        id?: string;\n        className?: string;\n        /** Default primary */\n        priority?: \"primary\" | \"secondary\" | \"tertiary\" | \"tertiary no outline\";\n        /** Default medium */\n        size?: \"small\" | \"medium\" | \"large\";\n        style?: CSSProperties;\n    };\n\n    export type IconOnly = {\n        children?: never;\n        /** Function of the button */\n        title: string;\n        iconId: FrIconClassName | RiIconClassName;\n        iconPosition?: never;\n    };\n\n    export type WithIcon = {\n        children: ReactNode;\n        /** Function of the button, to provide if the label isn't explicit */\n        title?: string;\n        iconId: FrIconClassName | RiIconClassName;\n        /** Default left */\n        iconPosition?: \"left\" | \"right\";\n    };\n\n    export type WithoutIcon = {\n        children: ReactNode;\n        /** Function of the button, to provide if the label isn't explicit */\n        title?: string;\n        iconId?: never;\n        iconPosition?: never;\n    };\n\n    export type AsAnchor = {\n        linkProps: RegisteredLinkProps;\n        onClick?: never;\n        nativeButtonProps?: never;\n        disabled?: never;\n        type?: never;\n    };\n    export type AsButton = {\n        linkProps?: never;\n        onClick?: React.MouseEventHandler<HTMLButtonElement>;\n        nativeButtonProps?: ComponentProps<\"button\"> &\n            Record<`data-${string}`, string | boolean | null | undefined>;\n        disabled?: boolean;\n        /** Default \"button\" */\n        type?: \"button\" | \"submit\" | \"reset\";\n    };\n}\n\n/** @see <https://components.react-dsfr.codegouv.studio/?path=/docs/components-button> */\nexport const Button = memo(\n    forwardRef<HTMLButtonElement | HTMLAnchorElement, ButtonProps>((props, ref) => {\n        const {\n            id: props_id,\n            className: prop_className,\n            children,\n            title,\n            iconId,\n            iconPosition = \"left\",\n            priority = \"primary\",\n            size = \"medium\",\n            linkProps,\n            onClick,\n            nativeButtonProps,\n            disabled,\n            type,\n            style,\n            ...rest\n        } = props;\n\n        assert<Equals<keyof typeof rest, never>>();\n\n        const id = useAnalyticsId({\n            \"defaultIdPrefix\": \"fr-button\",\n            \"explicitlyProvidedId\": props_id\n        });\n\n        const { Link } = getLink();\n\n        const className = cx(\n            fr.cx(\n                \"fr-btn\",\n                priority !== \"primary\" &&\n                    `fr-btn--${\n                        priority === \"tertiary no outline\" ? \"tertiary-no-outline\" : priority\n                    }`,\n                size !== \"medium\" &&\n                    `fr-btn--${(() => {\n                        switch (size) {\n                            case \"small\":\n                                return \"sm\";\n                            case \"large\":\n                                return \"lg\";\n                        }\n                    })()}`,\n                ...(iconId === undefined\n                    ? []\n                    : [iconId, children !== undefined && (`fr-btn--icon-${iconPosition}` as const)])\n            ),\n            linkProps !== undefined && linkProps.className,\n            prop_className\n        );\n\n        return linkProps !== undefined ? (\n            <Link\n                {...linkProps}\n                id={props_id ?? linkProps.id ?? id}\n                title={title ?? linkProps.title}\n                className={cx(linkProps?.className, className)}\n                style={{\n                    ...linkProps?.style,\n                    ...style\n                }}\n                ref={ref as React.ForwardedRef<HTMLAnchorElement>}\n                {...rest}\n            >\n                {children}\n            </Link>\n        ) : (\n            <button\n                {...nativeButtonProps}\n                id={props_id ?? nativeButtonProps?.id ?? id}\n                className={cx(nativeButtonProps?.className, className)}\n                style={{\n                    ...nativeButtonProps?.style,\n                    ...style\n                }}\n                type={type ?? nativeButtonProps?.type}\n                title={title ?? nativeButtonProps?.title}\n                onClick={onClick ?? nativeButtonProps?.onClick}\n                disabled={disabled ?? nativeButtonProps?.disabled}\n                ref={ref as React.ForwardedRef<HTMLButtonElement>}\n                {...rest}\n            >\n                {children}\n            </button>\n        );\n    })\n) as MemoExoticComponent<\n    ForwardRefExoticComponent<\n        ButtonProps.Common &\n            (ButtonProps.IconOnly | ButtonProps.WithIcon | ButtonProps.WithoutIcon) &\n            (\n                | (ButtonProps.AsAnchor & RefAttributes<HTMLAnchorElement>)\n                | (ButtonProps.AsButton & RefAttributes<HTMLButtonElement>)\n            )\n    >\n>;\n\nButton.displayName = symToStr({ Button });\n\nexport default Button;\n","import React, {\n    memo,\n    forwardRef,\n    ReactNode,\n    useId,\n    type InputHTMLAttributes,\n    type TextareaHTMLAttributes,\n    type DetailedHTMLProps,\n    type CSSProperties\n} from \"react\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { assert } from \"tsafe/assert\";\nimport type { Equals } from \"tsafe\";\nimport { fr } from \"./fr\";\nimport { cx } from \"./tools/cx\";\nimport type { FrIconClassName, RiIconClassName } from \"./fr/generatedFromCss/classNames\";\n\nexport type InputProps = InputProps.RegularInput | InputProps.TextArea;\n\nexport namespace InputProps {\n    export type Common = {\n        className?: string;\n        id?: string;\n        label: ReactNode;\n        hintText?: ReactNode;\n        hideLabel?: boolean;\n        /** default: false */\n        disabled?: boolean;\n        iconId?: FrIconClassName | RiIconClassName;\n        classes?: Partial<\n            Record<\"root\" | \"label\" | \"description\" | \"nativeInputOrTextArea\" | \"message\", string>\n        >;\n        style?: CSSProperties;\n        /** Default: \"default\" */\n        state?: \"success\" | \"error\" | \"default\";\n        /** The message won't be displayed if state is \"default\" */\n        stateRelatedMessage?: ReactNode;\n    };\n\n    export type RegularInput = Common & {\n        /** Default: false */\n        textArea?: false;\n        /** Props forwarded to the underlying <input /> element */\n        nativeInputProps?: DetailedHTMLProps<\n            InputHTMLAttributes<HTMLInputElement>,\n            HTMLInputElement\n        >;\n\n        nativeTextAreaProps?: never;\n    };\n\n    export type TextArea = Common & {\n        /** Default: false */\n        textArea: true;\n        /** Props forwarded to the underlying <textarea /> element */\n        nativeTextAreaProps?: DetailedHTMLProps<\n            TextareaHTMLAttributes<HTMLTextAreaElement>,\n            HTMLTextAreaElement\n        >;\n\n        nativeInputProps?: never;\n    };\n}\n\n/**\n * @see <https://components.react-dsfr.codegouv.studio/?path=/docs/components-input>\n * */\nexport const Input = memo(\n    forwardRef<HTMLDivElement, InputProps>((props, ref) => {\n        const {\n            className,\n            id,\n            label,\n            hintText,\n            hideLabel,\n            disabled = false,\n            iconId: iconId_props,\n            classes = {},\n            style,\n            state = \"default\",\n            stateRelatedMessage,\n            textArea = false,\n            nativeTextAreaProps,\n            nativeInputProps,\n            ...rest\n        } = props;\n\n        const nativeInputOrTextAreaProps =\n            (textArea ? nativeTextAreaProps : nativeInputProps) ?? {};\n\n        const NativeInputOrTextArea = textArea ? \"textarea\" : \"input\";\n\n        assert<Equals<keyof typeof rest, never>>();\n\n        const inputId = (function useClosure() {\n            const id = useId();\n\n            return nativeInputOrTextAreaProps.id ?? `input-${id}`;\n        })();\n\n        const messageId = `${inputId}-desc-error`;\n\n        return (\n            <div\n                className={cx(\n                    fr.cx(\n                        nativeInputProps?.type === \"file\" ? \"fr-upload-group\" : \"fr-input-group\",\n                        disabled && \"fr-input-group--disabled\",\n                        (() => {\n                            switch (state) {\n                                case \"error\":\n                                    return \"fr-input-group--error\";\n                                case \"success\":\n                                    return \"fr-input-group--valid\";\n                                case \"default\":\n                                    return undefined;\n                            }\n                            assert<Equals<typeof state, never>>(false);\n                        })()\n                    ),\n                    classes.root,\n                    className\n                )}\n                style={style}\n                ref={ref}\n                id={id}\n                {...rest}\n            >\n                <label\n                    className={cx(fr.cx(\"fr-label\", hideLabel && \"fr-sr-only\"), classes.label)}\n                    htmlFor={inputId}\n                >\n                    {label}\n                    {hintText !== undefined && <span className=\"fr-hint-text\">{hintText}</span>}\n                </label>\n                {(() => {\n                    const nativeInputOrTextArea = (\n                        <NativeInputOrTextArea\n                            {...(nativeInputOrTextAreaProps as {})}\n                            className={cx(\n                                fr.cx(\n                                    \"fr-input\",\n                                    (() => {\n                                        switch (state) {\n                                            case \"error\":\n                                                return \"fr-input--error\";\n                                            case \"success\":\n                                                return \"fr-input--valid\";\n                                            case \"default\":\n                                                return undefined;\n                                        }\n                                        assert<Equals<typeof state, never>>(false);\n                                    })()\n                                ),\n                                classes.nativeInputOrTextArea\n                            )}\n                            disabled={disabled || undefined}\n                            aria-describedby={messageId}\n                            type={textArea ? undefined : nativeInputProps?.type ?? \"text\"}\n                            id={inputId}\n                        />\n                    );\n\n                    const iconId =\n                        iconId_props ??\n                        (nativeInputProps?.type === \"date\" ? \"ri-calendar-line\" : undefined);\n\n                    return iconId === undefined ? (\n                        nativeInputOrTextArea\n                    ) : (\n                        <div className={fr.cx(\"fr-input-wrap\", iconId)}>\n                            {nativeInputOrTextArea}\n                        </div>\n                    );\n                })()}\n                {state !== \"default\" && (\n                    <p\n                        id={messageId}\n                        className={cx(\n                            fr.cx(\n                                (() => {\n                                    switch (state) {\n                                        case \"error\":\n                                            return \"fr-error-text\";\n                                        case \"success\":\n                                            return \"fr-valid-text\";\n                                    }\n                                    assert<Equals<typeof state, never>>(false);\n                                })()\n                            ),\n                            classes.message\n                        )}\n                    >\n                        {stateRelatedMessage}\n                    </p>\n                )}\n            </div>\n        );\n    })\n);\n\nInput.displayName = symToStr({ Input });\n\nexport default Input;\n","import React, {\n    type DetailedHTMLProps,\n    forwardRef,\n    type InputHTMLAttributes,\n    memo,\n    type ReactNode,\n    useId\n} from \"react\";\nimport { assert, type Equals } from \"tsafe/assert\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { fr } from \"../fr\";\nimport { createComponentI18nApi } from \"../i18n\";\nimport type { InputProps } from \"../Input\";\nimport { cx } from \"../tools/cx\";\nimport type { FrClassName } from \"../fr/generatedFromCss/classNames\";\nimport { useAnalyticsId } from \"../tools/useAnalyticsId\";\n\nexport type PasswordInputProps = Omit<\n    InputProps.Common,\n    \"state\" | \"stateRelatedMessage\" | \"iconId\" | \"classes\"\n> & {\n    classes?: Partial<Record<\"root\" | \"input\" | \"label\" | \"checkbox\", string>>;\n    /** Default \"Your password must contain:\", if empty string the hint wont be displayed */\n    messagesHint?: ReactNode;\n    messages?: {\n        severity: PasswordInputProps.Severity;\n        message: ReactNode;\n    }[];\n    nativeInputProps?: Omit<\n        DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>,\n        \"type\"\n    >;\n};\n\nexport namespace PasswordInputProps {\n    type ExtractSeverity<ClassName extends string> =\n        ClassName extends `fr-message--${infer Severity}` ? Severity : never;\n\n    export type Severity = ExtractSeverity<FrClassName>;\n}\n\n/**\n * @see <https://components.react-dsfr.codegouv.studio/?path=/docs/blocks-passwordinput\n * */\nexport const PasswordInput = memo(\n    forwardRef<HTMLDivElement, PasswordInputProps>((props, ref) => {\n        const { t } = useTranslation();\n\n        const {\n            className,\n            id: id_props,\n            label,\n            hintText,\n            hideLabel,\n            disabled = false,\n            classes = {},\n            style,\n            messages = [],\n            nativeInputProps,\n            messagesHint = t(\"your password must contain\"),\n            ...rest\n        } = props;\n\n        assert<Equals<keyof typeof rest, never>>();\n\n        const id = useAnalyticsId({\n            \"explicitlyProvidedId\": id_props,\n            \"defaultIdPrefix\": \"password-input\"\n        });\n\n        const inputId = (function useClosure() {\n            const id = useId();\n\n            return nativeInputProps?.id ?? `password-${id}`;\n        })();\n        const togglePasswordShowId = `${inputId}-toggle-show`;\n        const messagesGroupId = `${inputId}-messages-group`;\n        const messageGroupId = `${inputId}-message-group`;\n\n        const hasError = messages.find(({ severity }) => severity === \"error\") !== undefined;\n        const isSuccess =\n            messages.length !== 0 &&\n            messages.find(({ severity }) => severity !== \"valid\") === undefined;\n\n        return (\n            <div\n                className={cx(\n                    fr.cx(\n                        \"fr-password\",\n                        disabled && \"fr-input-group--disabled\",\n                        hasError && \"fr-input-group--error\",\n                        isSuccess && \"fr-input-group--valid\"\n                    ),\n                    classes.root,\n                    className\n                )}\n                id={id}\n                style={style}\n                ref={ref}\n                {...rest}\n            >\n                <label\n                    className={cx(fr.cx(\"fr-label\", hideLabel && \"fr-sr-only\"), classes.label)}\n                    htmlFor={inputId}\n                >\n                    {label}\n                    {hintText !== undefined && <span className=\"fr-hint-text\">{hintText}</span>}\n                </label>\n                <div className={fr.cx(\"fr-input-wrap\")}>\n                    <input\n                        {...nativeInputProps}\n                        className={cx(fr.cx(\"fr-password__input\", \"fr-input\"), classes.input)}\n                        id={inputId}\n                        type=\"password\"\n                        disabled={disabled}\n                        {...(messages.length !== 0 && { \"aria-describedby\": messagesGroupId })}\n                    />\n                </div>\n                {messages.length !== 0 && (\n                    <div\n                        className={fr.cx(\"fr-messages-group\")}\n                        id={messagesGroupId}\n                        aria-live=\"assertive\"\n                    >\n                        {messagesHint !== \"\" && (\n                            <p className={fr.cx(\"fr-message\")} id={messageGroupId}>\n                                {messagesHint}\n                            </p>\n                        )}\n                        {messages.map(({ severity, message }, index) => (\n                            <p\n                                key={index}\n                                className={fr.cx(\"fr-message\", `fr-message--${severity}`)}\n                                id={`${messageGroupId}-${index}`}\n                            >\n                                {message}\n                            </p>\n                        ))}\n                    </div>\n                )}\n                <div\n                    className={cx(\n                        fr.cx(\n                            \"fr-password__checkbox\",\n                            \"fr-checkbox-group\",\n                            \"fr-checkbox-group--sm\"\n                        ),\n                        classes.checkbox\n                    )}\n                >\n                    <input\n                        aria-label={t(\"show password\")}\n                        id={togglePasswordShowId}\n                        type=\"checkbox\"\n                        disabled={disabled || undefined}\n                    />\n                    <label\n                        className={cx(fr.cx(\"fr-password__checkbox\", \"fr-label\"), classes.checkbox)}\n                        htmlFor={togglePasswordShowId}\n                    >\n                        {t(\"show\")}\n                    </label>\n                </div>\n            </div>\n        );\n    })\n);\n\nconst { useTranslation, addPasswordInputTranslations } = createComponentI18nApi({\n    \"componentName\": symToStr({ PasswordInput }),\n    \"frMessages\": {\n        /* spell-checker: disable */\n        \"show\": \"Afficher\",\n        \"show password\": \"Afficher le mot de passe\",\n        \"your password must contain\": \"Votre mot de passe doit contenir :\"\n        /* spell-checker: enable */\n    }\n});\n\naddPasswordInputTranslations({\n    \"lang\": \"en\",\n    \"messages\": {\n        \"show\": \"Show\",\n        \"show password\": \"Show password\",\n        \"your password must contain\": \"Your password must contain:\"\n    }\n});\n\naddPasswordInputTranslations({\n    \"lang\": \"es\",\n    \"messages\": {\n        /* spell-checker: disable */\n        \"show\": \"Mostrar\",\n        \"show password\": \"Mostrar contraseña\",\n        \"your password must contain\": \"Su contraseña debe contener:\"\n        /* spell-checker: enable */\n    }\n});\n\nPasswordInput.displayName = symToStr({ PasswordInput });\n\nexport default PasswordInput;\n","import { useId } from \"react\";\n\n/**\n * Eulerian analytics requires every element to have a unique ID.\n * This hook help generate such an ID in the case they are not explicitly provided.\n */\nexport function useAnalyticsId(params: { explicitlyProvidedId?: string; defaultIdPrefix: string }) {\n    const { explicitlyProvidedId, defaultIdPrefix } = params;\n\n    const id = useId();\n\n    return explicitlyProvidedId ?? `${defaultIdPrefix}-${id}`;\n}\n","import { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\n\nexport function createUseClassName<ClassKey extends string>(params: { defaultClasses: Record<ClassKey, string | undefined> }) {\n    const { defaultClasses } = params;\n\n    function useGetClassName(params: { doUseDefaultCss: boolean; classes: Partial<Record<ClassKey, string>> | undefined }) {\n        const { classes } = params;\n\n        const getClassName = useConstCallback((classKey: ClassKey): string => {\n            return clsx(classKey, defaultClasses[classKey], classes?.[classKey]);\n        });\n\n        return { getClassName };\n    }\n\n    return { useGetClassName };\n}\n","import { createUseClassName } from \"keycloakify/lib/useGetClassName\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\n\nexport const { useGetClassName } = createUseClassName<ClassKey>({\n    \"defaultClasses\": {\n        \"kcHtmlClass\": \"login-pf\",\n        \"kcLoginClass\": \"login-pf-page\",\n        \"kcContentWrapperClass\": \"row\",\n        \"kcHeaderClass\": \"login-pf-page-header\",\n        \"kcHeaderWrapperClass\": undefined,\n        \"kcFormCardClass\": \"card-pf\",\n        \"kcFormCardAccountClass\": \"login-pf-accounts\",\n        \"kcFormSocialAccountClass\": \"login-pf-social-section\",\n        \"kcFormSocialAccountContentClass\": \"col-xs-12 col-sm-6\",\n        \"kcFormHeaderClass\": \"login-pf-header\",\n        \"kcLocaleWrapperClass\": undefined,\n        \"kcFeedbackErrorIcon\": \"pficon pficon-error-circle-o\",\n        \"kcFeedbackWarningIcon\": \"pficon pficon-warning-triangle-o\",\n        \"kcFeedbackSuccessIcon\": \"pficon pficon-ok\",\n        \"kcFeedbackInfoIcon\": \"pficon pficon-info\",\n        \"kcResetFlowIcon\": \"pficon pficon-arrow fa-2x\",\n        \"kcFormGroupClass\": \"form-group\",\n        \"kcLabelWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcSignUpClass\": \"login-pf-signup\",\n        \"kcInfoAreaWrapperClass\": undefined,\n\n        \"kcLogoClass\": \"login-pf-brand\",\n        \"kcContainerClass\": \"container-fluid\",\n        \"kcContentClass\": \"col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3\",\n        \"kcFeedbackAreaClass\": \"col-md-12\",\n        \"kcLocaleClass\": \"col-xs-12 col-sm-1\",\n        \"kcAlertIconClasserror\": \"pficon pficon-error-circle-o\",\n\n        \"kcFormAreaClass\": \"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\",\n        \"kcFormSocialAccountListClass\": \"login-pf-social list-unstyled login-pf-social-all\",\n        \"kcFormSocialAccountDoubleListClass\": \"login-pf-social-double-col\",\n        \"kcFormSocialAccountListLinkClass\": \"login-pf-social-link\",\n        \"kcWebAuthnKeyIcon\": \"pficon pficon-key\",\n        \"kcWebAuthnDefaultIcon\": \"pficon pficon-key\",\n\n        \"kcFormClass\": \"form-horizontal\",\n        \"kcFormGroupErrorClass\": \"has-error\",\n        \"kcLabelClass\": \"control-label\",\n        \"kcInputClass\": \"form-control\",\n        \"kcInputErrorMessageClass\": \"pf-c-form__helper-text pf-m-error required kc-feedback-text\",\n        \"kcInputWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormOptionsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormSettingClass\": \"login-pf-settings\",\n        \"kcTextareaClass\": \"form-control\",\n\n        \"kcInfoAreaClass\": \"col-xs-12 col-sm-4 col-md-4 col-lg-5 details\",\n\n        // user-profile grouping\n        \"kcFormGroupHeader\": \"pf-c-form__group\",\n\n        // css classes for form buttons main class used for all buttons\n        \"kcButtonClass\": \"btn\",\n        // classes defining priority of the button - primary or default (there is typically only one priority button for the form)\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonDefaultClass\": \"btn-default\",\n        // classes defining size of the button\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonBlockClass\": \"btn-block\",\n\n        // css classes for input\n        \"kcInputLargeClass\": \"input-lg\",\n\n        // css classes for form accessability\n        \"kcSrOnlyClass\": \"sr-only\",\n\n        // css classes for select-authenticator form\n        \"kcSelectAuthListClass\": \"list-group list-view-pf\",\n        \"kcSelectAuthListItemClass\": \"list-group-item list-view-pf-stacked\",\n        \"kcSelectAuthListItemFillClass\": \"pf-l-split__item pf-m-fill\",\n        \"kcSelectAuthListItemIconPropertyClass\": \"fa-2x select-auth-box-icon-properties\",\n        \"kcSelectAuthListItemIconClass\": \"pf-l-split__item select-auth-box-icon\",\n        \"kcSelectAuthListItemTitle\": \"select-auth-box-paragraph\",\n        \"kcSelectAuthListItemInfoClass\": \"list-view-pf-main-info\",\n        \"kcSelectAuthListItemLeftClass\": \"list-view-pf-left\",\n        \"kcSelectAuthListItemBodyClass\": \"list-view-pf-body\",\n        \"kcSelectAuthListItemDescriptionClass\": \"list-view-pf-description\",\n        \"kcSelectAuthListItemHeadingClass\": \"list-group-item-heading\",\n        \"kcSelectAuthListItemHelpTextClass\": \"list-group-item-text\",\n\n        // css classes for the authenticators\n        \"kcAuthenticatorDefaultClass\": \"fa list-view-pf-icon-lg\",\n        \"kcAuthenticatorPasswordClass\": \"fa fa-unlock list-view-pf-icon-lg\",\n        \"kcAuthenticatorOTPClass\": \"fa fa-mobile list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnClass\": \"fa fa-key list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnPasswordlessClass\": \"fa fa-key list-view-pf-icon-lg\",\n\n        //css classes for the OTP Login Form\n        \"kcSelectOTPListClass\": \"card-pf card-pf-view card-pf-view-select card-pf-view-single-select\",\n        \"kcSelectOTPListItemClass\": \"card-pf-body card-pf-top-element\",\n        \"kcAuthenticatorOtpCircleClass\": \"fa fa-mobile card-pf-icon-circle\",\n        \"kcSelectOTPItemHeadingClass\": \"card-pf-title text-center\",\n        \"kcFormOptionsWrapperClass\": undefined\n    }\n});\n","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport type CxArg = undefined | null | string | boolean | Partial<Record<string, boolean | null | undefined>> | readonly CxArg[];\n\nexport const clsx = (...args: CxArg[]): string => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null) continue;\n\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                } else {\n                    assert(!typeGuard<{ length: number }>(arg, false));\n\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k as string] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n","/** @see <https://docs.tsafe.dev/main/symtostr> */\nexport function symToStr<T extends Record<string, unknown>>(wrap: T): keyof T {\n    return Object.keys(wrap)[0];\n}\n","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard<T>(_value: any, isMatched: boolean): _value is T {\n    return isMatched;\n}\n"],"names":["Fieldset","memo","forwardRef","props","ref","className","id_props","id","_props$classes","classes","style","legend","hintText","options","_props$orientation","orientation","_props$state","state","stateRelatedMessage","_props$disabled","disabled","type","name_props","name","_props$small","small","rest","__rest","assert","useAnalyticsId","concat","undefined","getInputId","i","legendId","errorDescId","successDescId","messagesWrapperId","radioName","useId","React","Object","assign","cx","fr","root","role","content","map","_ref","label","nativeInputProps","key","htmlFor","displayName","symToStr","Checkbox","AgentConnectButton","href","url","onClick","t","useTranslation","Inner","target","_createComponentI18nA","createComponentI18nApi","addAgentConnectButtonTranslations","FranceConnectButton","_props$plus","plus","innerProps","login","brand","rel","title","params","addFranceConnectButtonTranslations","Login","kcContext","i18n","Template","doUseDefaultCss","classes_props","getClassName","useGetClassName","social","realm","usernameHidden","auth","registrationDisabled","msg","msgStr","_useStyles","useStyles","_useState","useState","_useState2","_slicedToArray","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","_formElement$querySel","preventDefault","formElement","querySelector","setAttribute","submit","_jsx","displayInfo","displayWide","password","providers","headerNode","infoNode","_jsxs","resetAndRegister","children","resetPasswordAllowed","tabIndex","loginResetCredentialsUrl","forgotPassword","registrationAllowed","registrationUrl","action","loginAction","method","centerCol","agentConnect","length","p","toLocaleLowerCase","replace","includes","loginUrl","Button","linkProps","providerId","inputs","_login$username","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","Input","_objectSpread","username","PasswordInput","rememberMe","selectedCredential","value","tss","create","props_id","prop_className","iconId","_props$iconPosition","iconPosition","_props$priority","priority","_props$size","size","nativeButtonProps","Link","getLink","_toConsumableArray","_a","_b","hideLabel","iconId_props","_props$textArea","textArea","nativeTextAreaProps","nativeInputOrTextAreaProps","NativeInputOrTextArea","inputId","messageId","nativeInputOrTextArea","message","_props$messages","messages","_props$messagesHint","messagesHint","togglePasswordShowId","messagesGroupId","messageGroupId","hasError","find","severity","isSuccess","_ref2","input","_ref3","index","checkbox","addPasswordInputTranslations","explicitlyProvidedId","defaultIdPrefix","createUseClassName","defaultClasses","classKey","clsx","len","arguments","cls","arg","toAdd","Array","isArray","apply","k","typeGuard","exports","wrap","keys","_value","isMatched"],"sourceRoot":""}