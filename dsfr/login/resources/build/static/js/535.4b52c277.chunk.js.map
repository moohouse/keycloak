{"version":3,"file":"static/js/535.4b52c277.chunk.js","mappings":"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","sources":["login/pages/shared/UserProfileFormFields.tsx","login/pages/RegisterUserProfile.tsx","../node_modules/@codegouvfr/react-dsfr/src/Input.tsx","../node_modules/tsafe/src/symToStr.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { I18n } from \"login/i18n\";\nimport { Input } from \"@codegouvfr/react-dsfr/Input\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"] & {\n        properties: {\n            contactEmail: string;\n        };\n    };\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n};\n\nexport function UserProfileFormFields({\n    kcContext,\n    onIsFormSubmittableValueChange,\n    i18n,\n    getClassName\n}: UserProfileFormFieldsProps) {\n    const { advancedMsg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    const { msgStr } = i18n;\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    const contactEmail =\n        kcContext.properties.contactEmail ||\n        \"ERROR: Need to be provided as environnement variable\";\n\n    return (\n        <>\n            {attributesWithPassword.map(attribute => {\n                const { value, displayableErrors } =\n                    fieldStateByAttributeName[attribute.name];\n\n                return (\n                    <Input\n                        key={attribute.name}\n                        label={advancedMsg(attribute.displayName ?? \"\")}\n                        nativeInputProps={{\n                            \"type\": (() => {\n                                switch (attribute.name) {\n                                    case \"password-confirm\":\n                                    case \"password\":\n                                        return \"password\";\n                                    default:\n                                        return \"text\";\n                                }\n                            })(),\n                            \"id\": attribute.name,\n                            \"name\": attribute.name,\n                            \"value\": value,\n                            \"onChange\": event =>\n                                formValidationDispatch({\n                                    \"action\": \"update value\",\n                                    \"name\": attribute.name,\n                                    \"newValue\": event.currentTarget.value\n                                }),\n                            \"className\": getClassName(\"kcInputClass\"),\n                            \"aria-invalid\": displayableErrors.length !== 0,\n                            \"disabled\": attribute.readOnly,\n                            \"autoComplete\": attribute.autocomplete,\n                            \"onBlur\": () =>\n                                formValidationDispatch({\n                                    \"action\": \"focus lost\",\n                                    \"name\": attribute.name\n                                })\n                        }}\n                        state={displayableErrors.length !== 0 ? \"error\" : \"default\"}\n                        stateRelatedMessage={\n                            attribute.name === \"email\" &&\n                            displayableErrors[0]?.validatorName === \"pattern\" ? (\n                                <span>\n                                    {msgStr(\"you domain isn't allowed yet\")}\n                                    &nbsp;\n                                    <a\n                                        href={`mailto:${contactEmail}?subject=${encodeURIComponent(\n                                            msgStr(\"mail subject\")\n                                        )}&body=${encodeURIComponent(\n                                            msgStr(\"mail body\")\n                                        )}`}\n                                    >\n                                        {contactEmail}\n                                    </a>\n                                </span>\n                            ) : (\n                                displayableErrors[0]?.errorMessageStr\n                            )\n                        }\n                    />\n                );\n            })}\n        </>\n    );\n}\n","import { useState } from \"react\";\nimport { UserProfileFormFields } from \"./shared/UserProfileFormFields\";\nimport { tss } from \"tss-react/dsfr\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { fr } from \"@codegouvfr/react-dsfr\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function RegisterUserProfile(\n    props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>\n) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes: classes_props } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        \"classes\": classes_props\n    });\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n    const { classes } = useStyles();\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, \"classes\": classes_props }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            headerNode={msg(\"registerTitle\")}\n        >\n            <form\n                id=\"kc-register-form\"\n                className={classes.centerCol}\n                action={url.registrationAction}\n                method=\"post\"\n            >\n                <div className={classes.inputs}>\n                    <UserProfileFormFields\n                        kcContext={kcContext}\n                        onIsFormSubmittableValueChange={setIsFomSubmittable}\n                        i18n={i18n}\n                        getClassName={getClassName}\n                    />\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                <div\n                                    className=\"g-recaptcha\"\n                                    data-size=\"compact\"\n                                    data-sitekey={recaptchaSiteKey}\n                                />\n                            </div>\n                        </div>\n                    )}\n                    <div className={classes.buttons}>\n                        <a\n                            className={fr.cx(\"fr-btn\", \"fr-btn--secondary\")}\n                            href={url.loginUrl}\n                        >\n                            {msgStr(\"backToLogin\")}\n                        </a>\n                        <input\n                            className={fr.cx(\"fr-btn\")}\n                            type=\"submit\"\n                            value={msgStr(\"doRegister\")}\n                            disabled={!isFomSubmittable}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n\nconst useStyles = tss.withName({ RegisterUserProfile }).create({\n    \"centerCol\": {\n        \"display\": \"flex\",\n        \"flexDirection\": \"column\",\n        \"alignItems\": \"center\"\n    },\n    \"inputs\": {\n        \"display\": \"flex\",\n        \"flexDirection\": \"column\",\n        \"width\": \"100%\"\n    },\n    \"buttons\": {\n        \"display\": \"flex\",\n        \"gap\": fr.spacing(\"4v\"),\n        \"justifyContent\": \"end\"\n    }\n});\n","import React, {\n    memo,\n    forwardRef,\n    ReactNode,\n    useId,\n    type InputHTMLAttributes,\n    type TextareaHTMLAttributes,\n    type DetailedHTMLProps,\n    type CSSProperties\n} from \"react\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { assert } from \"tsafe/assert\";\nimport type { Equals } from \"tsafe\";\nimport { fr } from \"./fr\";\nimport { cx } from \"./tools/cx\";\nimport type { FrIconClassName, RiIconClassName } from \"./fr/generatedFromCss/classNames\";\n\nexport type InputProps = InputProps.RegularInput | InputProps.TextArea;\n\nexport namespace InputProps {\n    export type Common = {\n        className?: string;\n        id?: string;\n        label: ReactNode;\n        hintText?: ReactNode;\n        hideLabel?: boolean;\n        /** default: false */\n        disabled?: boolean;\n        iconId?: FrIconClassName | RiIconClassName;\n        classes?: Partial<\n            Record<\"root\" | \"label\" | \"description\" | \"nativeInputOrTextArea\" | \"message\", string>\n        >;\n        style?: CSSProperties;\n        /** Default: \"default\" */\n        state?: \"success\" | \"error\" | \"default\";\n        /** The message won't be displayed if state is \"default\" */\n        stateRelatedMessage?: ReactNode;\n    };\n\n    export type RegularInput = Common & {\n        /** Default: false */\n        textArea?: false;\n        /** Props forwarded to the underlying <input /> element */\n        nativeInputProps?: DetailedHTMLProps<\n            InputHTMLAttributes<HTMLInputElement>,\n            HTMLInputElement\n        >;\n\n        nativeTextAreaProps?: never;\n    };\n\n    export type TextArea = Common & {\n        /** Default: false */\n        textArea: true;\n        /** Props forwarded to the underlying <textarea /> element */\n        nativeTextAreaProps?: DetailedHTMLProps<\n            TextareaHTMLAttributes<HTMLTextAreaElement>,\n            HTMLTextAreaElement\n        >;\n\n        nativeInputProps?: never;\n    };\n}\n\n/**\n * @see <https://components.react-dsfr.codegouv.studio/?path=/docs/components-input>\n * */\nexport const Input = memo(\n    forwardRef<HTMLDivElement, InputProps>((props, ref) => {\n        const {\n            className,\n            id,\n            label,\n            hintText,\n            hideLabel,\n            disabled = false,\n            iconId: iconId_props,\n            classes = {},\n            style,\n            state = \"default\",\n            stateRelatedMessage,\n            textArea = false,\n            nativeTextAreaProps,\n            nativeInputProps,\n            ...rest\n        } = props;\n\n        const nativeInputOrTextAreaProps =\n            (textArea ? nativeTextAreaProps : nativeInputProps) ?? {};\n\n        const NativeInputOrTextArea = textArea ? \"textarea\" : \"input\";\n\n        assert<Equals<keyof typeof rest, never>>();\n\n        const inputId = (function useClosure() {\n            const id = useId();\n\n            return nativeInputOrTextAreaProps.id ?? `input-${id}`;\n        })();\n\n        const messageId = `${inputId}-desc-error`;\n\n        return (\n            <div\n                className={cx(\n                    fr.cx(\n                        nativeInputProps?.type === \"file\" ? \"fr-upload-group\" : \"fr-input-group\",\n                        disabled && \"fr-input-group--disabled\",\n                        (() => {\n                            switch (state) {\n                                case \"error\":\n                                    return \"fr-input-group--error\";\n                                case \"success\":\n                                    return \"fr-input-group--valid\";\n                                case \"default\":\n                                    return undefined;\n                            }\n                            assert<Equals<typeof state, never>>(false);\n                        })()\n                    ),\n                    classes.root,\n                    className\n                )}\n                style={style}\n                ref={ref}\n                id={id}\n                {...rest}\n            >\n                <label\n                    className={cx(fr.cx(\"fr-label\", hideLabel && \"fr-sr-only\"), classes.label)}\n                    htmlFor={inputId}\n                >\n                    {label}\n                    {hintText !== undefined && <span className=\"fr-hint-text\">{hintText}</span>}\n                </label>\n                {(() => {\n                    const nativeInputOrTextArea = (\n                        <NativeInputOrTextArea\n                            {...(nativeInputOrTextAreaProps as {})}\n                            className={cx(\n                                fr.cx(\n                                    \"fr-input\",\n                                    (() => {\n                                        switch (state) {\n                                            case \"error\":\n                                                return \"fr-input--error\";\n                                            case \"success\":\n                                                return \"fr-input--valid\";\n                                            case \"default\":\n                                                return undefined;\n                                        }\n                                        assert<Equals<typeof state, never>>(false);\n                                    })()\n                                ),\n                                classes.nativeInputOrTextArea\n                            )}\n                            disabled={disabled || undefined}\n                            aria-describedby={messageId}\n                            type={textArea ? undefined : nativeInputProps?.type ?? \"text\"}\n                            id={inputId}\n                        />\n                    );\n\n                    const iconId =\n                        iconId_props ??\n                        (nativeInputProps?.type === \"date\" ? \"ri-calendar-line\" : undefined);\n\n                    return iconId === undefined ? (\n                        nativeInputOrTextArea\n                    ) : (\n                        <div className={fr.cx(\"fr-input-wrap\", iconId)}>\n                            {nativeInputOrTextArea}\n                        </div>\n                    );\n                })()}\n                {state !== \"default\" && (\n                    <p\n                        id={messageId}\n                        className={cx(\n                            fr.cx(\n                                (() => {\n                                    switch (state) {\n                                        case \"error\":\n                                            return \"fr-error-text\";\n                                        case \"success\":\n                                            return \"fr-valid-text\";\n                                    }\n                                    assert<Equals<typeof state, never>>(false);\n                                })()\n                            ),\n                            classes.message\n                        )}\n                    >\n                        {stateRelatedMessage}\n                    </p>\n                )}\n            </div>\n        );\n    })\n);\n\nInput.displayName = symToStr({ Input });\n\nexport default Input;\n","/** @see <https://docs.tsafe.dev/main/symtostr> */\nexport function symToStr<T extends Record<string, unknown>>(wrap: T): keyof T {\n    return Object.keys(wrap)[0];\n}\n"],"names":["UserProfileFormFields","_ref","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","advancedMsg","_useFormValidation","useFormValidation","_useFormValidation$fo","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","msgStr","useEffect","contactEmail","properties","_jsx","_Fragment","children","map","attribute","_attribute$displayNam","_displayableErrors$","_displayableErrors$2","_fieldStateByAttribut","name","value","displayableErrors","Input","label","displayName","nativeInputProps","event","currentTarget","length","readOnly","autocomplete","state","stateRelatedMessage","validatorName","_jsxs","href","concat","encodeURIComponent","errorMessageStr","RegisterUserProfile","props","doUseDefaultCss","Template","classes_props","classes","useGetClassName","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","useStyles","_useState","useState","_useState2","_slicedToArray","isFomSubmittable","setIsFomSubmittable","displayMessage","exists","headerNode","id","className","centerCol","action","registrationAction","method","inputs","buttons","fr","loginUrl","type","disabled","tss","create","memo","forwardRef","ref","hintText","hideLabel","_props$disabled","iconId_props","iconId","_props$classes","style","_props$state","_props$textArea","textArea","nativeTextAreaProps","rest","__rest","nativeInputOrTextAreaProps","_a","NativeInputOrTextArea","assert","inputId","useId","messageId","React","Object","assign","cx","root","htmlFor","undefined","nativeInputOrTextArea","message","symToStr","exports","wrap","keys"],"sourceRoot":""}