{"version":3,"file":"static/js/782.c8150066.chunk.js","mappings":"iRAce,SAASA,EACpBC,GAEA,IAAQC,EAAuED,EAAvEC,UAAWC,EAA4DF,EAA5DE,KAAMC,EAAsDH,EAAtDG,gBAAiBC,EAAqCJ,EAArCI,SAAmBC,EAAkBL,EAA3BM,QAE5CC,EAAgBL,EAAhBK,IAAKC,EAAWN,EAAXM,OACbC,EAAwBC,IAAhBJ,EAAOG,EAAPH,QAASK,EAAEF,EAAFE,GAETC,GAAiBC,EAAAA,EAAAA,GAAgB,CACrCV,gBAAAA,EACA,QAAWE,IAFPO,cAKRE,EAAAA,EAAAA,GAAiB,CACbb,UAAAA,EACA,qBAAuB,WAAD,IAAAc,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAA2B,OAAlBL,EAAkBD,EAAlBC,mBAAkBG,EAAAE,KAAA,EAClBC,MACxB,WACG,IAAMC,EAAmC,WACrC,IAAQA,EAAW3B,EAAU4B,WAArBD,OAER,GAAe,KAAXA,EACA,MAAM,IAAIE,MAAM,uCAGpB,IACI,OAAOC,KAAKC,MAAMJ,EACtB,CAAE,MAAAK,GACE,OAAOL,CACX,CACJ,CAZyC,GAmBzC,OAAOM,GAL4BC,EAAAA,EAAAA,IAA6B,CAC5D,gBAAmBd,EACnB,iBAAoB,OAFhBa,wBAKsBN,EAClC,CArBC,IAsBHQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAAE,KAAD,EAvBf,OAAdhB,EAAcE,EAAAe,KAAAf,EAAAgB,OAAA,SAyBblB,GAAc,wBAAAE,EAAAiB,OAAA,GAAAtB,EAAA,KACxB,gBAAAuB,GAAA,OAAA3B,EAAA4B,MAAA,KAAAC,UAAA,EA3BsB,MA8B3BC,EAAAA,EAAAA,IAAyBC,EAAAA,GAEzB,IAAQC,EAAQ9C,EAAR8C,IAER,YAA8BC,IAA1BF,EAAAA,EAAAA,MACO,MAIPG,EAAAA,EAAAA,MAAC7C,EAAQ,CACCH,UAAAA,EAAWC,KAAAA,EAAMC,gBAAAA,EAAiB,QAAWE,EACnD6C,gBAAgB,EAChBC,WAAY5C,EAAI,cAAc6C,SAAA,EAE9BC,EAAAA,EAAAA,KAAA,OAAKC,GAAG,gBAAeF,SAClBN,EAAAA,EAAAA,QAAyBO,EAAAA,EAAAA,KAACE,EAAAA,EAAQ,CAAAH,SAAEN,EAAAA,EAAAA,WAEzCG,EAAAA,EAAAA,MAAA,QACIO,UAAW7C,EAAG,eAAgBL,EAAQmD,aACtCC,OAAQX,EAAIY,YACZC,OAAO,OAAMR,SAAA,EAEbC,EAAAA,EAAAA,KAAA,SACIG,UAAW7C,EACPC,EAAa,iBACbA,EAAa,iBACbA,EAAa,iBACbA,EAAa,wBACbA,EAAa,uBAEjBiD,KAAK,SACLP,GAAG,YACHQ,KAAK,SACLC,MAAOvD,EAAO,eAElB6C,EAAAA,EAAAA,KAAA,SACIG,UAAW7C,EACPC,EAAa,iBACbA,EAAa,wBACbA,EAAa,uBAEjBiD,KAAK,SACLP,GAAG,aACHQ,KAAK,SACLC,MAAOvD,EAAO,mBAGtB6C,EAAAA,EAAAA,KAAA,OAAKG,UAAU,eAG3B,CAEA,IAAM9C,EAAYsD,EAAAA,EAAAA,SAAa,CAAEjE,MAAAA,IAASkE,OAAO,CAC7C,YAAe,CACX,QAAW,OACX,IAAOC,EAAAA,GAAAA,QAAW,Q","sources":["login/pages/Terms.tsx"],"sourcesContent":["import { useRerenderOnStateChange } from \"evt/hooks\";\nimport { Markdown } from \"keycloakify/tools/Markdown\";\nimport {\n    evtTermMarkdown,\n    useDownloadTerms\n} from \"keycloakify/login/lib/useDownloadTerms\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { tss } from \"tss-react/dsfr\";\nimport { fr } from \"@codegouvfr/react-dsfr\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\nimport { createResolveLocalizedString, type LocalizedString } from \"i18nifty\";\n\nexport default function Terms(\n    props: PageProps<Extract<KcContext, { pageId: \"terms.ftl\" }>, I18n>\n) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes: classes_props } = props;\n\n    const { msg, msgStr } = i18n;\n    const { classes, cx } = useStyles();\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        \"classes\": classes_props\n    });\n\n    useDownloadTerms({\n        kcContext,\n        \"downloadTermMarkdown\": async ({ currentLanguageTag }) => {\n            const markdownString = await fetch(\n                (() => {\n                    const tosUrl: LocalizedString<string> = (() => {\n                        const { tosUrl } = kcContext.properties;\n\n                        if (tosUrl === \"\") {\n                            throw new Error(\"No URL to Terms of Service provided\");\n                        }\n\n                        try {\n                            return JSON.parse(tosUrl);\n                        } catch {\n                            return tosUrl;\n                        }\n                    })();\n\n                    const { resolveLocalizedString } = createResolveLocalizedString({\n                        \"currentLanguage\": currentLanguageTag,\n                        \"fallbackLanguage\": \"en\"\n                    });\n\n                    return resolveLocalizedString(tosUrl);\n                })()\n            ).then(response => response.text());\n\n            return markdownString;\n        }\n    });\n\n    useRerenderOnStateChange(evtTermMarkdown);\n\n    const { url } = kcContext;\n\n    if (evtTermMarkdown.state === undefined) {\n        return null;\n    }\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, \"classes\": classes_props }}\n            displayMessage={false}\n            headerNode={msg(\"termsTitle\")}\n        >\n            <div id=\"kc-terms-text\">\n                {evtTermMarkdown.state && <Markdown>{evtTermMarkdown.state}</Markdown>}\n            </div>\n            <form\n                className={cx(\"form-actions\", classes.formActions)}\n                action={url.loginAction}\n                method=\"POST\"\n            >\n                <input\n                    className={cx(\n                        getClassName(\"kcButtonClass\"),\n                        getClassName(\"kcButtonClass\"),\n                        getClassName(\"kcButtonClass\"),\n                        getClassName(\"kcButtonPrimaryClass\"),\n                        getClassName(\"kcButtonLargeClass\")\n                    )}\n                    name=\"accept\"\n                    id=\"kc-accept\"\n                    type=\"submit\"\n                    value={msgStr(\"doAccept\")}\n                />\n                <input\n                    className={cx(\n                        getClassName(\"kcButtonClass\"),\n                        getClassName(\"kcButtonDefaultClass\"),\n                        getClassName(\"kcButtonLargeClass\")\n                    )}\n                    name=\"cancel\"\n                    id=\"kc-decline\"\n                    type=\"submit\"\n                    value={msgStr(\"doDecline\")}\n                />\n            </form>\n            <div className=\"clearfix\" />\n        </Template>\n    );\n}\n\nconst useStyles = tss.withName({ Terms }).create({\n    \"formActions\": {\n        \"display\": \"flex\",\n        \"gap\": fr.spacing(\"4v\")\n    }\n});\n"],"names":["Terms","props","kcContext","i18n","doUseDefaultCss","Template","classes_props","classes","msg","msgStr","_useStyles","useStyles","cx","getClassName","useGetClassName","useDownloadTerms","_downloadTermMarkdown","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","currentLanguageTag","markdownString","wrap","_context","prev","next","fetch","tosUrl","properties","Error","JSON","parse","_unused","resolveLocalizedString","createResolveLocalizedString","then","response","text","sent","abrupt","stop","_x","apply","arguments","useRerenderOnStateChange","evtTermMarkdown","url","undefined","_jsxs","displayMessage","headerNode","children","_jsx","id","Markdown","className","formActions","action","loginAction","method","name","type","value","tss","create","fr"],"sourceRoot":""}