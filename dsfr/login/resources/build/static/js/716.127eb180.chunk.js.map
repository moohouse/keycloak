{"version":3,"file":"static/js/716.127eb180.chunk.js","mappings":"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","sources":["account/pages/Password.tsx","../node_modules/@codegouvfr/react-dsfr/src/Button.tsx","../node_modules/@codegouvfr/react-dsfr/src/blocks/PasswordInput.tsx","../node_modules/@codegouvfr/react-dsfr/src/tools/useAnalyticsId.ts","../node_modules/tsafe/src/symToStr.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport type { PageProps } from \"keycloakify/account/pages/PageProps\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\nimport { fr } from \"@codegouvfr/react-dsfr\";\nimport { PasswordInput } from \"@codegouvfr/react-dsfr/blocks/PasswordInput\";\nimport { Button } from \"@codegouvfr/react-dsfr/Button\";\nimport { useStyles } from \"tss-react/dsfr\";\n\nexport default function Password(\n    props: PageProps<Extract<KcContext, { pageId: \"password.ftl\" }>, I18n>\n) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { css } = useStyles();\n\n    const { url, password, account, stateChecker, message, referrer } = kcContext;\n\n    const { msgStr, msg } = i18n;\n\n    const [currentPassword, setCurrentPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [newPasswordConfirm, setNewPasswordConfirm] = useState(\"\");\n    const [newPasswordError, setNewPasswordError] = useState(\"\");\n    const [newPasswordConfirmError, setNewPasswordConfirmError] = useState(\"\");\n    const [hasNewPasswordBlurred, setHasNewPasswordBlurred] = useState(false);\n    // prettier-ignore\n    const [hasNewPasswordConfirmBlurred, setHasNewPasswordConfirmBlurred] = useState(false);\n\n    useEffect(() => {\n        const appUrl = referrer?.url;\n\n        if (appUrl === undefined) {\n            return;\n        }\n\n        if (message?.type !== \"success\") {\n            return;\n        }\n\n        setTimeout(() => {\n            window.location.href = appUrl;\n        }, 1000);\n    }, []);\n\n    const checkNewPassword = (newPassword: string) => {\n        if (!password.passwordSet) {\n            return;\n        }\n\n        if (newPassword === currentPassword) {\n            setNewPasswordError(msgStr(\"newPasswordSameAsOld\"));\n        } else {\n            setNewPasswordError(\"\");\n        }\n    };\n\n    const checkNewPasswordConfirm = (newPasswordConfirm: string) => {\n        if (newPasswordConfirm === \"\") {\n            return;\n        }\n\n        if (newPassword !== newPasswordConfirm) {\n            setNewPasswordConfirmError(msgStr(\"passwordConfirmNotMatch\"));\n        } else {\n            setNewPasswordConfirmError(\"\");\n        }\n    };\n\n    return (\n        <Template\n            {...{\n                kcContext,\n                i18n,\n                doUseDefaultCss,\n                classes\n            }}\n            active=\"password\"\n        >\n            <h2\n                className={css({\n                    \"marginBottom\": fr.spacing(\"10v\"),\n                    [fr.breakpoints.down(\"md\")]: {\n                        \"marginBottom\": fr.spacing(\"8v\")\n                    }\n                })}\n            >\n                {msg(\"changePasswordHtmlTitle\")}\n            </h2>\n\n            <form\n                action={url.passwordUrl}\n                method=\"post\"\n                className={css({\n                    \"maxWidth\": 650,\n                    \"margin\": \"auto\",\n                    [`& > .${fr.cx(\"fr-password\")}:not(:first-of-type)`]: {\n                        \"marginTop\": fr.spacing(\"10v\")\n                    }\n                })}\n            >\n                <input\n                    type=\"text\"\n                    id=\"username\"\n                    name=\"username\"\n                    value={account.username ?? \"\"}\n                    autoComplete=\"username\"\n                    readOnly\n                    style={{ \"display\": \"none\" }}\n                />\n\n                {password.passwordSet && (\n                    <PasswordInput\n                        label={msgStr(\"password\") + \" *\"}\n                        messagesHint={\"\"}\n                        nativeInputProps={{\n                            \"id\": \"password\",\n                            \"name\": \"password\",\n                            \"autoFocus\": true,\n                            \"autoComplete\": \"current-password\",\n                            \"value\": currentPassword,\n                            \"onChange\": event => setCurrentPassword(event.target.value)\n                        }}\n                    />\n                )}\n\n                <input\n                    type=\"hidden\"\n                    id=\"stateChecker\"\n                    name=\"stateChecker\"\n                    value={stateChecker}\n                />\n\n                <PasswordInput\n                    label={msgStr(\"passwordNew\") + \" *\"}\n                    messagesHint={\"\"}\n                    nativeInputProps={{\n                        \"id\": \"password-new\",\n                        \"name\": \"password-new\",\n                        \"autoComplete\": \"new-password\",\n                        \"value\": newPassword,\n                        \"onChange\": event => {\n                            const newPassword = event.target.value;\n\n                            setNewPassword(newPassword);\n                            if (hasNewPasswordBlurred) {\n                                checkNewPassword(newPassword);\n                            }\n                        },\n                        \"onBlur\": () => {\n                            setHasNewPasswordBlurred(true);\n                            checkNewPassword(newPassword);\n                        }\n                    }}\n                    messages={\n                        newPasswordError === \"\"\n                            ? undefined\n                            : [{ \"severity\": \"error\", \"message\": newPasswordError }]\n                    }\n                />\n\n                <PasswordInput\n                    label={msgStr(\"passwordConfirm\") + \" *\"}\n                    messagesHint={\"\"}\n                    nativeInputProps={{\n                        \"id\": \"password-confirm\",\n                        \"name\": \"password-confirm\",\n                        \"autoComplete\": \"new-password\",\n                        \"value\": newPasswordConfirm,\n                        \"onChange\": event => {\n                            const newPasswordConfirm = event.target.value;\n\n                            setNewPasswordConfirm(newPasswordConfirm);\n                            if (hasNewPasswordConfirmBlurred) {\n                                checkNewPasswordConfirm(newPasswordConfirm);\n                            }\n                        },\n                        \"onBlur\": () => {\n                            setHasNewPasswordConfirmBlurred(true);\n                            checkNewPasswordConfirm(newPasswordConfirm);\n                        }\n                    }}\n                    messages={\n                        newPasswordConfirmError === \"\"\n                            ? undefined\n                            : [\n                                  {\n                                      \"severity\": \"error\",\n                                      \"message\": newPasswordConfirmError\n                                  }\n                              ]\n                    }\n                />\n\n                <Button\n                    className={css({ \"float\": \"right\", \"marginTop\": fr.spacing(\"10v\") })}\n                    disabled={newPasswordError !== \"\" || newPasswordConfirmError !== \"\"}\n                    nativeButtonProps={{\n                        \"type\": \"submit\",\n                        \"name\": \"submitAction\",\n                        \"value\": \"Save\"\n                    }}\n                >\n                    {msg(\"doSave\")}\n                </Button>\n            </form>\n        </Template>\n    );\n}\n","import React, {\n    memo,\n    forwardRef,\n    type ReactNode,\n    type RefAttributes,\n    type MemoExoticComponent,\n    type ForwardRefExoticComponent,\n    type CSSProperties,\n    type ComponentProps\n} from \"react\";\nimport { fr } from \"./fr\";\nimport { cx } from \"./tools/cx\";\nimport type { FrIconClassName, RiIconClassName } from \"./fr/generatedFromCss/classNames\";\nimport { getLink } from \"./link\";\nimport type { RegisteredLinkProps } from \"./link\";\nimport { assert } from \"tsafe/assert\";\nimport type { Equals } from \"tsafe\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { useAnalyticsId } from \"./tools/useAnalyticsId\";\n\nexport type ButtonProps = ButtonProps.Common &\n    (ButtonProps.IconOnly | ButtonProps.WithIcon | ButtonProps.WithoutIcon) &\n    (ButtonProps.AsAnchor | ButtonProps.AsButton);\nexport namespace ButtonProps {\n    export type Common = {\n        id?: string;\n        className?: string;\n        /** Default primary */\n        priority?: \"primary\" | \"secondary\" | \"tertiary\" | \"tertiary no outline\";\n        /** Default medium */\n        size?: \"small\" | \"medium\" | \"large\";\n        style?: CSSProperties;\n    };\n\n    export type IconOnly = {\n        children?: never;\n        /** Function of the button */\n        title: string;\n        iconId: FrIconClassName | RiIconClassName;\n        iconPosition?: never;\n    };\n\n    export type WithIcon = {\n        children: ReactNode;\n        /** Function of the button, to provide if the label isn't explicit */\n        title?: string;\n        iconId: FrIconClassName | RiIconClassName;\n        /** Default left */\n        iconPosition?: \"left\" | \"right\";\n    };\n\n    export type WithoutIcon = {\n        children: ReactNode;\n        /** Function of the button, to provide if the label isn't explicit */\n        title?: string;\n        iconId?: never;\n        iconPosition?: never;\n    };\n\n    export type AsAnchor = {\n        linkProps: RegisteredLinkProps;\n        onClick?: never;\n        nativeButtonProps?: never;\n        disabled?: never;\n        type?: never;\n    };\n    export type AsButton = {\n        linkProps?: never;\n        onClick?: React.MouseEventHandler<HTMLButtonElement>;\n        nativeButtonProps?: ComponentProps<\"button\"> &\n            Record<`data-${string}`, string | boolean | null | undefined>;\n        disabled?: boolean;\n        /** Default \"button\" */\n        type?: \"button\" | \"submit\" | \"reset\";\n    };\n}\n\n/** @see <https://components.react-dsfr.codegouv.studio/?path=/docs/components-button> */\nexport const Button = memo(\n    forwardRef<HTMLButtonElement | HTMLAnchorElement, ButtonProps>((props, ref) => {\n        const {\n            id: props_id,\n            className: prop_className,\n            children,\n            title,\n            iconId,\n            iconPosition = \"left\",\n            priority = \"primary\",\n            size = \"medium\",\n            linkProps,\n            onClick,\n            nativeButtonProps,\n            disabled,\n            type,\n            style,\n            ...rest\n        } = props;\n\n        assert<Equals<keyof typeof rest, never>>();\n\n        const id = useAnalyticsId({\n            \"defaultIdPrefix\": \"fr-button\",\n            \"explicitlyProvidedId\": props_id\n        });\n\n        const { Link } = getLink();\n\n        const className = cx(\n            fr.cx(\n                \"fr-btn\",\n                priority !== \"primary\" &&\n                    `fr-btn--${\n                        priority === \"tertiary no outline\" ? \"tertiary-no-outline\" : priority\n                    }`,\n                size !== \"medium\" &&\n                    `fr-btn--${(() => {\n                        switch (size) {\n                            case \"small\":\n                                return \"sm\";\n                            case \"large\":\n                                return \"lg\";\n                        }\n                    })()}`,\n                ...(iconId === undefined\n                    ? []\n                    : [iconId, children !== undefined && (`fr-btn--icon-${iconPosition}` as const)])\n            ),\n            linkProps !== undefined && linkProps.className,\n            prop_className\n        );\n\n        return linkProps !== undefined ? (\n            <Link\n                {...linkProps}\n                id={props_id ?? linkProps.id ?? id}\n                title={title ?? linkProps.title}\n                className={cx(linkProps?.className, className)}\n                style={{\n                    ...linkProps?.style,\n                    ...style\n                }}\n                ref={ref as React.ForwardedRef<HTMLAnchorElement>}\n                {...rest}\n            >\n                {children}\n            </Link>\n        ) : (\n            <button\n                {...nativeButtonProps}\n                id={props_id ?? nativeButtonProps?.id ?? id}\n                className={cx(nativeButtonProps?.className, className)}\n                style={{\n                    ...nativeButtonProps?.style,\n                    ...style\n                }}\n                type={type ?? nativeButtonProps?.type}\n                title={title ?? nativeButtonProps?.title}\n                onClick={onClick ?? nativeButtonProps?.onClick}\n                disabled={disabled ?? nativeButtonProps?.disabled}\n                ref={ref as React.ForwardedRef<HTMLButtonElement>}\n                {...rest}\n            >\n                {children}\n            </button>\n        );\n    })\n) as MemoExoticComponent<\n    ForwardRefExoticComponent<\n        ButtonProps.Common &\n            (ButtonProps.IconOnly | ButtonProps.WithIcon | ButtonProps.WithoutIcon) &\n            (\n                | (ButtonProps.AsAnchor & RefAttributes<HTMLAnchorElement>)\n                | (ButtonProps.AsButton & RefAttributes<HTMLButtonElement>)\n            )\n    >\n>;\n\nButton.displayName = symToStr({ Button });\n\nexport default Button;\n","import React, {\n    type DetailedHTMLProps,\n    forwardRef,\n    type InputHTMLAttributes,\n    memo,\n    type ReactNode,\n    useId\n} from \"react\";\nimport { assert, type Equals } from \"tsafe/assert\";\nimport { symToStr } from \"tsafe/symToStr\";\nimport { fr } from \"../fr\";\nimport { createComponentI18nApi } from \"../i18n\";\nimport type { InputProps } from \"../Input\";\nimport { cx } from \"../tools/cx\";\nimport type { FrClassName } from \"../fr/generatedFromCss/classNames\";\nimport { useAnalyticsId } from \"../tools/useAnalyticsId\";\n\nexport type PasswordInputProps = Omit<\n    InputProps.Common,\n    \"state\" | \"stateRelatedMessage\" | \"iconId\" | \"classes\"\n> & {\n    classes?: Partial<Record<\"root\" | \"input\" | \"label\" | \"checkbox\", string>>;\n    /** Default \"Your password must contain:\", if empty string the hint wont be displayed */\n    messagesHint?: ReactNode;\n    messages?: {\n        severity: PasswordInputProps.Severity;\n        message: ReactNode;\n    }[];\n    nativeInputProps?: Omit<\n        DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>,\n        \"type\"\n    >;\n};\n\nexport namespace PasswordInputProps {\n    type ExtractSeverity<ClassName extends string> =\n        ClassName extends `fr-message--${infer Severity}` ? Severity : never;\n\n    export type Severity = ExtractSeverity<FrClassName>;\n}\n\n/**\n * @see <https://components.react-dsfr.codegouv.studio/?path=/docs/blocks-passwordinput\n * */\nexport const PasswordInput = memo(\n    forwardRef<HTMLDivElement, PasswordInputProps>((props, ref) => {\n        const { t } = useTranslation();\n\n        const {\n            className,\n            id: id_props,\n            label,\n            hintText,\n            hideLabel,\n            disabled = false,\n            classes = {},\n            style,\n            messages = [],\n            nativeInputProps,\n            messagesHint = t(\"your password must contain\"),\n            ...rest\n        } = props;\n\n        assert<Equals<keyof typeof rest, never>>();\n\n        const id = useAnalyticsId({\n            \"explicitlyProvidedId\": id_props,\n            \"defaultIdPrefix\": \"password-input\"\n        });\n\n        const inputId = (function useClosure() {\n            const id = useId();\n\n            return nativeInputProps?.id ?? `password-${id}`;\n        })();\n        const togglePasswordShowId = `${inputId}-toggle-show`;\n        const messagesGroupId = `${inputId}-messages-group`;\n        const messageGroupId = `${inputId}-message-group`;\n\n        const hasError = messages.find(({ severity }) => severity === \"error\") !== undefined;\n        const isSuccess =\n            messages.length !== 0 &&\n            messages.find(({ severity }) => severity !== \"valid\") === undefined;\n\n        return (\n            <div\n                className={cx(\n                    fr.cx(\n                        \"fr-password\",\n                        disabled && \"fr-input-group--disabled\",\n                        hasError && \"fr-input-group--error\",\n                        isSuccess && \"fr-input-group--valid\"\n                    ),\n                    classes.root,\n                    className\n                )}\n                id={id}\n                style={style}\n                ref={ref}\n                {...rest}\n            >\n                <label\n                    className={cx(fr.cx(\"fr-label\", hideLabel && \"fr-sr-only\"), classes.label)}\n                    htmlFor={inputId}\n                >\n                    {label}\n                    {hintText !== undefined && <span className=\"fr-hint-text\">{hintText}</span>}\n                </label>\n                <div className={fr.cx(\"fr-input-wrap\")}>\n                    <input\n                        {...nativeInputProps}\n                        className={cx(fr.cx(\"fr-password__input\", \"fr-input\"), classes.input)}\n                        id={inputId}\n                        type=\"password\"\n                        disabled={disabled}\n                        {...(messages.length !== 0 && { \"aria-describedby\": messagesGroupId })}\n                    />\n                </div>\n                {messages.length !== 0 && (\n                    <div\n                        className={fr.cx(\"fr-messages-group\")}\n                        id={messagesGroupId}\n                        aria-live=\"assertive\"\n                    >\n                        {messagesHint !== \"\" && (\n                            <p className={fr.cx(\"fr-message\")} id={messageGroupId}>\n                                {messagesHint}\n                            </p>\n                        )}\n                        {messages.map(({ severity, message }, index) => (\n                            <p\n                                key={index}\n                                className={fr.cx(\"fr-message\", `fr-message--${severity}`)}\n                                id={`${messageGroupId}-${index}`}\n                            >\n                                {message}\n                            </p>\n                        ))}\n                    </div>\n                )}\n                <div\n                    className={cx(\n                        fr.cx(\n                            \"fr-password__checkbox\",\n                            \"fr-checkbox-group\",\n                            \"fr-checkbox-group--sm\"\n                        ),\n                        classes.checkbox\n                    )}\n                >\n                    <input\n                        aria-label={t(\"show password\")}\n                        id={togglePasswordShowId}\n                        type=\"checkbox\"\n                        disabled={disabled || undefined}\n                    />\n                    <label\n                        className={cx(fr.cx(\"fr-password__checkbox\", \"fr-label\"), classes.checkbox)}\n                        htmlFor={togglePasswordShowId}\n                    >\n                        {t(\"show\")}\n                    </label>\n                </div>\n            </div>\n        );\n    })\n);\n\nconst { useTranslation, addPasswordInputTranslations } = createComponentI18nApi({\n    \"componentName\": symToStr({ PasswordInput }),\n    \"frMessages\": {\n        /* spell-checker: disable */\n        \"show\": \"Afficher\",\n        \"show password\": \"Afficher le mot de passe\",\n        \"your password must contain\": \"Votre mot de passe doit contenir :\"\n        /* spell-checker: enable */\n    }\n});\n\naddPasswordInputTranslations({\n    \"lang\": \"en\",\n    \"messages\": {\n        \"show\": \"Show\",\n        \"show password\": \"Show password\",\n        \"your password must contain\": \"Your password must contain:\"\n    }\n});\n\naddPasswordInputTranslations({\n    \"lang\": \"es\",\n    \"messages\": {\n        /* spell-checker: disable */\n        \"show\": \"Mostrar\",\n        \"show password\": \"Mostrar contraseña\",\n        \"your password must contain\": \"Su contraseña debe contener:\"\n        /* spell-checker: enable */\n    }\n});\n\nPasswordInput.displayName = symToStr({ PasswordInput });\n\nexport default PasswordInput;\n","import { useId } from \"react\";\n\n/**\n * Eulerian analytics requires every element to have a unique ID.\n * This hook help generate such an ID in the case they are not explicitly provided.\n */\nexport function useAnalyticsId(params: { explicitlyProvidedId?: string; defaultIdPrefix: string }) {\n    const { explicitlyProvidedId, defaultIdPrefix } = params;\n\n    const id = useId();\n\n    return explicitlyProvidedId ?? `${defaultIdPrefix}-${id}`;\n}\n","/** @see <https://docs.tsafe.dev/main/symtostr> */\nexport function symToStr<T extends Record<string, unknown>>(wrap: T): keyof T {\n    return Object.keys(wrap)[0];\n}\n"],"names":["Password","props","_account$username","kcContext","i18n","doUseDefaultCss","Template","classes","css","useStyles","url","password","account","stateChecker","message","referrer","msgStr","msg","_useState","useState","_useState2","_slicedToArray","currentPassword","setCurrentPassword","_useState3","_useState4","newPassword","setNewPassword","_useState5","_useState6","newPasswordConfirm","setNewPasswordConfirm","_useState7","_useState8","newPasswordError","setNewPasswordError","_useState9","_useState10","newPasswordConfirmError","setNewPasswordConfirmError","_useState11","_useState12","hasNewPasswordBlurred","setHasNewPasswordBlurred","_useState13","_useState14","hasNewPasswordConfirmBlurred","setHasNewPasswordConfirmBlurred","useEffect","appUrl","undefined","type","setTimeout","window","location","href","checkNewPassword","passwordSet","checkNewPasswordConfirm","_jsxs","active","children","_jsx","className","_defineProperty","fr","action","passwordUrl","method","concat","id","name","value","username","autoComplete","readOnly","style","PasswordInput","label","messagesHint","nativeInputProps","event","target","messages","Button","disabled","nativeButtonProps","memo","forwardRef","ref","props_id","prop_className","title","iconId","_props$iconPosition","iconPosition","_props$priority","priority","_props$size","size","linkProps","onClick","rest","__rest","assert","useAnalyticsId","Link","getLink","cx","_toConsumableArray","React","Object","assign","_a","_b","displayName","symToStr","t","useTranslation","id_props","hintText","hideLabel","_props$disabled","_props$classes","_props$messages","_props$messagesHint","inputId","useId","togglePasswordShowId","messagesGroupId","messageGroupId","hasError","find","_ref","severity","isSuccess","length","_ref2","root","htmlFor","input","map","_ref3","index","key","checkbox","_createComponentI18nA","createComponentI18nApi","addPasswordInputTranslations","params","explicitlyProvidedId","defaultIdPrefix","exports","wrap","keys"],"sourceRoot":""}